{"version":3,"names":["request","require","expect","BASE_URL","process","env","API_BASE_URL","API_PREFIX","authToken","testFeeStandardId","testFeePaymentId","describe","before","loginResponse","post","send","username","password","status","to","equal","body","data","token","feeStandardData","name","description","minIncome","maxIncome","feeRate","fixedAmount","it","response","set","success","be","true","have","property","id","get","an","length","greaterThan","updateData","put","feePaymentData","userId","amount","paymentDate","paymentMethod","remark","startDate","endDate","a","greaterThanOrEqual","invalidData","after","delete"],"sources":["fee-management-api.test.js"],"sourcesContent":["const request = require('supertest');\nconst { expect } = require('chai');\n\n// 测试配置\nconst BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080';\nconst API_PREFIX = '/api';\n\n// 测试数据\nlet authToken = '';\nlet testFeeStandardId = null;\nlet testFeePaymentId = null;\n\ndescribe('党费管理 API 测试', () => {\n  // 测试前的准备工作\n  before(async () => {\n    // 登录获取认证token\n    const loginResponse = await request(BASE_URL)\n      .post(`${API_PREFIX}/api/auth/login`)\n      .send({\n        username: 'admin',\n        password: 'admin123'\n      });\n    \n    expect(loginResponse.status).to.equal(200);\n    authToken = loginResponse.body.data.token;\n  });\n\n  describe('党费标准管理 API', () => {\n    const feeStandardData = {\n      name: '测试党费标准',\n      description: '用于API测试的党费标准',\n      minIncome: 3000,\n      maxIncome: 5000,\n      feeRate: 0.005,\n      fixedAmount: 0,\n      status: 'ACTIVE'\n    };\n\n    it('应该能够创建新的党费标准', async () => {\n      const response = await request(BASE_URL)\n        .post(`${API_PREFIX}/fee-standards`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(feeStandardData);\n\n      expect(response.status).to.equal(201);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.have.property('id');\n      expect(response.body.data.name).to.equal(feeStandardData.name);\n      \n      testFeeStandardId = response.body.data.id;\n    });\n\n    it('应该能够获取所有党费标准列表', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n      expect(response.body.data.length).to.be.greaterThan(0);\n    });\n\n    it('应该能够根据ID获取特定的党费标准', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards/${testFeeStandardId}`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data.id).to.equal(testFeeStandardId);\n      expect(response.body.data.name).to.equal(feeStandardData.name);\n    });\n\n    it('应该能够更新党费标准信息', async () => {\n      const updateData = {\n        ...feeStandardData,\n        name: '更新后的党费标准',\n        description: '更新后的描述'\n      };\n\n      const response = await request(BASE_URL)\n        .put(`${API_PREFIX}/fee-standards/${testFeeStandardId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateData);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data.name).to.equal(updateData.name);\n      expect(response.body.data.description).to.equal(updateData.description);\n    });\n\n    it('应该能够根据收入范围查询党费标准', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards/by-income/4000`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够根据状态查询党费标准', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards/by-status/ACTIVE`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够分页获取党费标准', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards/page?page=0&size=10`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.have.property('content');\n      expect(response.body.data).to.have.property('totalElements');\n      expect(response.body.data).to.have.property('totalPages');\n    });\n  });\n\n  describe('党费缴费记录管理 API', () => {\n    const feePaymentData = {\n      userId: 1,\n      amount: 20.00,\n      paymentDate: '2024-01-15',\n      paymentMethod: 'BANK_TRANSFER',\n      status: 'PAID',\n      remark: 'API测试缴费记录'\n    };\n\n    it('应该能够创建新的缴费记录', async () => {\n      const response = await request(BASE_URL)\n        .post(`${API_PREFIX}/fee-payments`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(feePaymentData);\n\n      expect(response.status).to.equal(201);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.have.property('id');\n      expect(response.body.data.amount).to.equal(feePaymentData.amount);\n      \n      testFeePaymentId = response.body.data.id;\n    });\n\n    it('应该能够获取所有缴费记录列表', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n      expect(response.body.data.length).to.be.greaterThan(0);\n    });\n\n    it('应该能够根据ID获取特定的缴费记录', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/${testFeePaymentId}`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data.id).to.equal(testFeePaymentId);\n      expect(response.body.data.amount).to.equal(feePaymentData.amount);\n    });\n\n    it('应该能够更新缴费记录信息', async () => {\n      const updateData = {\n        ...feePaymentData,\n        amount: 25.00,\n        status: 'CONFIRMED',\n        remark: '更新后的缴费记录'\n      };\n\n      const response = await request(BASE_URL)\n        .put(`${API_PREFIX}/fee-payments/${testFeePaymentId}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(updateData);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data.amount).to.equal(updateData.amount);\n      expect(response.body.data.status).to.equal(updateData.status);\n    });\n\n    it('应该能够根据用户ID查询缴费记录', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/user/1`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够根据状态查询缴费记录', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/by-status/PAID`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够根据日期范围查询缴费记录', async () => {\n      const startDate = '2024-01-01';\n      const endDate = '2024-12-31';\n      \n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/by-date-range?startDate=${startDate}&endDate=${endDate}`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够计算用户的总缴费金额', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/user/1/total-amount`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.a('number');\n      expect(response.body.data).to.be.greaterThanOrEqual(0);\n    });\n\n    it('应该能够分页获取缴费记录', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/page?page=0&size=10`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.have.property('content');\n      expect(response.body.data).to.have.property('totalElements');\n      expect(response.body.data).to.have.property('totalPages');\n    });\n  });\n\n  describe('党费统计分析 API', () => {\n    it('应该能够获取党费统计概览', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/statistics/overview`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.have.property('totalAmount');\n      expect(response.body.data).to.have.property('totalPayments');\n      expect(response.body.data).to.have.property('currentMonthAmount');\n      expect(response.body.data).to.have.property('unpaidCount');\n    });\n\n    it('应该能够获取月度缴费趋势', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/statistics/monthly-trend?year=2024`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够获取缴费方式统计', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/statistics/payment-methods`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n\n    it('应该能够获取组织缴费排行', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-payments/statistics/organization-ranking?limit=10`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(200);\n      expect(response.body.success).to.be.true;\n      expect(response.body.data).to.be.an('array');\n    });\n  });\n\n  describe('错误处理测试', () => {\n    it('应该在未授权时返回401错误', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards`);\n\n      expect(response.status).to.equal(401);\n    });\n\n    it('应该在访问不存在的资源时返回404错误', async () => {\n      const response = await request(BASE_URL)\n        .get(`${API_PREFIX}/fee-standards/99999`)\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).to.equal(404);\n    });\n\n    it('应该在提交无效数据时返回400错误', async () => {\n      const invalidData = {\n        name: '', // 空名称\n        minIncome: -1000, // 负数收入\n        feeRate: 2 // 超出范围的费率\n      };\n\n      const response = await request(BASE_URL)\n        .post(`${API_PREFIX}/fee-standards`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidData);\n\n      expect(response.status).to.equal(400);\n    });\n  });\n\n  // 清理测试数据\n  after(async () => {\n    // 删除测试创建的缴费记录\n    if (testFeePaymentId) {\n      await request(BASE_URL)\n        .delete(`${API_PREFIX}/fee-payments/${testFeePaymentId}`)\n        .set('Authorization', `Bearer ${authToken}`);\n    }\n\n    // 删除测试创建的党费标准\n    if (testFeeStandardId) {\n      await request(BASE_URL)\n        .delete(`${API_PREFIX}/fee-standards/${testFeeStandardId}`)\n        .set('Authorization', `Bearer ${authToken}`);\n    }\n  });\n});"],"mappings":"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","ignoreList":[]}