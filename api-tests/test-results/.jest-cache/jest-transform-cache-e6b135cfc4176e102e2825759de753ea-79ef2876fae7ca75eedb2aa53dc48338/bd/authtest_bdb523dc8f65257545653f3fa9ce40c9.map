{"version":3,"names":["describe","testUser","beforeAll","global","dataUtils","generateUserData","test","userData","response","apiUtils","post","assertUtils","expectSuccess","expect","data","toHaveProperty","username","toBe","email","testData","users","expectError","userData1","userData2","incompleteData","loginData","password","user","tokens","token","userToken","loginResponse","headers","authUtils","getAuthHeaders","get","expiredToken","updateData","realName","phone","randomPhone","put","passwordData","oldPassword","newPassword","adminToken","loginAsAdmin","profileResponse","maliciousData","status","xssData","JSON","stringify","not","toContain","attempts","i","push","responses","Promise","all","lastResponse","length","ADMIN_USERNAME","ADMIN_PASSWORD","startTime","Date","now","endTime","responseTime","toBeLessThan","promises","Array","fill","map","totalTime","forEach"],"sources":["auth.test.js"],"sourcesContent":["/**\n * 认证相关API测试\n * 测试用户登录、注册、权限验证等功能\n */\n\ndescribe('认证API测试', () => {\n  let testUser;\n  \n  beforeAll(() => {\n    testUser = global.dataUtils.generateUserData();\n  });\n  \n  describe('用户注册', () => {\n    test('正常注册新用户', async () => {\n      const userData = global.dataUtils.generateUserData();\n      \n      const response = await global.apiUtils.post('/api/auth/register', userData);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('id');\n      expect(response.data.data.username).toBe(userData.username);\n      expect(response.data.data.email).toBe(userData.email);\n      \n      // 保存用户数据用于后续测试\n      global.testData.users[userData.username] = response.data.data;\n    });\n    \n    test('用户名重复注册应失败', async () => {\n      const userData = global.dataUtils.generateUserData();\n      \n      // 第一次注册\n      await global.apiUtils.post('/api/auth/register', userData);\n      \n      // 第二次注册相同用户名\n      const response = await global.apiUtils.post('/api/auth/register', userData);\n      \n      global.assertUtils.expectError(response, 400, '用户名已存在');\n    });\n    \n    test('邮箱重复注册应失败', async () => {\n      const userData1 = global.dataUtils.generateUserData();\n      const userData2 = global.dataUtils.generateUserData();\n      userData2.email = userData1.email; // 使用相同邮箱\n      \n      // 第一次注册\n      await global.apiUtils.post('/api/auth/register', userData1);\n      \n      // 第二次注册相同邮箱\n      const response = await global.apiUtils.post('/api/auth/register', userData2);\n      \n      global.assertUtils.expectError(response, 400, '邮箱已存在');\n    });\n    \n    test('缺少必填字段注册应失败', async () => {\n      const incompleteData = {\n        username: 'testuser',\n        // 缺少password\n        email: 'test@example.com'\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/register', incompleteData);\n      \n      global.assertUtils.expectError(response, 400);\n    });\n    \n    test('无效邮箱格式注册应失败', async () => {\n      const userData = global.dataUtils.generateUserData();\n      userData.email = 'invalid-email';\n      \n      const response = await global.apiUtils.post('/api/auth/register', userData);\n      \n      global.assertUtils.expectError(response, 400, '邮箱格式');\n    });\n  });\n  \n  describe('用户登录', () => {\n    beforeAll(async () => {\n      // 创建测试用户\n      const response = await global.apiUtils.post('/api/auth/register', testUser);\n      global.testData.users[testUser.username] = response.data.data;\n    });\n    \n    test('正确用户名密码登录', async () => {\n      const loginData = {\n        username: testUser.username,\n        password: testUser.password\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('token');\n      expect(response.data.data).toHaveProperty('user');\n      expect(response.data.data.user.username).toBe(testUser.username);\n      \n      // 保存token用于后续测试\n      global.testData.tokens[testUser.username] = response.data.data.token;\n    });\n    \n    test('错误用户名登录应失败', async () => {\n      const loginData = {\n        username: 'nonexistent',\n        password: testUser.password\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      \n      global.assertUtils.expectError(response, 401, '用户名或密码错误');\n    });\n    \n    test('错误密码登录应失败', async () => {\n      const loginData = {\n        username: testUser.username,\n        password: 'wrongpassword'\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      \n      global.assertUtils.expectError(response, 401, '用户名或密码错误');\n    });\n    \n    test('空用户名登录应失败', async () => {\n      const loginData = {\n        username: '',\n        password: testUser.password\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      \n      global.assertUtils.expectError(response, 400);\n    });\n    \n    test('空密码登录应失败', async () => {\n      const loginData = {\n        username: testUser.username,\n        password: ''\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      \n      global.assertUtils.expectError(response, 400);\n    });\n  });\n  \n  describe('Token验证', () => {\n    let userToken;\n    \n    beforeAll(async () => {\n      // 登录获取token\n      const loginResponse = await global.apiUtils.post('/api/auth/login', {\n        username: testUser.username,\n        password: testUser.password\n      });\n      userToken = loginResponse.data.data.token;\n    });\n    \n    test('有效token访问受保护资源', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      \n      const response = await global.apiUtils.get('/api/auth/profile', headers);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data.username).toBe(testUser.username);\n    });\n    \n    test('无token访问受保护资源应失败', async () => {\n      const response = await global.apiUtils.get('/api/auth/profile');\n      \n      global.assertUtils.expectError(response, 401, '未授权');\n    });\n    \n    test('无效token访问受保护资源应失败', async () => {\n      const headers = global.authUtils.getAuthHeaders('invalid-token');\n      \n      const response = await global.apiUtils.get('/api/auth/profile', headers);\n      \n      global.assertUtils.expectError(response, 401, 'token无效');\n    });\n    \n    test('过期token访问受保护资源应失败', async () => {\n      // 模拟过期token（这里使用一个已知的过期token格式）\n      const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.invalid';\n      const headers = global.authUtils.getAuthHeaders(expiredToken);\n      \n      const response = await global.apiUtils.get('/api/auth/profile', headers);\n      \n      global.assertUtils.expectError(response, 401);\n    });\n  });\n  \n  describe('用户信息管理', () => {\n    let userToken;\n    \n    beforeAll(async () => {\n      const loginResponse = await global.apiUtils.post('/api/auth/login', {\n        username: testUser.username,\n        password: testUser.password\n      });\n      userToken = loginResponse.data.data.token;\n    });\n    \n    test('获取用户信息', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      \n      const response = await global.apiUtils.get('/api/auth/profile', headers);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('id');\n      expect(response.data.data).toHaveProperty('username');\n      expect(response.data.data).toHaveProperty('email');\n      expect(response.data.data).toHaveProperty('realName');\n    });\n    \n    test('更新用户信息', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      const updateData = {\n        realName: '更新后的姓名',\n        phone: global.dataUtils.randomPhone()\n      };\n      \n      const response = await global.apiUtils.put('/api/auth/profile', updateData, headers);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data.realName).toBe(updateData.realName);\n      expect(response.data.data.phone).toBe(updateData.phone);\n    });\n    \n    test('修改密码', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      const passwordData = {\n        oldPassword: testUser.password,\n        newPassword: 'newpassword123'\n      };\n      \n      const response = await global.apiUtils.put('/api/auth/password', passwordData, headers);\n      \n      global.assertUtils.expectSuccess(response);\n      \n      // 验证新密码可以登录\n      const loginResponse = await global.apiUtils.post('/api/auth/login', {\n        username: testUser.username,\n        password: passwordData.newPassword\n      });\n      \n      global.assertUtils.expectSuccess(loginResponse);\n    });\n    \n    test('错误旧密码修改密码应失败', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      const passwordData = {\n        oldPassword: 'wrongoldpassword',\n        newPassword: 'newpassword123'\n      };\n      \n      const response = await global.apiUtils.put('/api/auth/password', passwordData, headers);\n      \n      global.assertUtils.expectError(response, 400, '原密码错误');\n    });\n  });\n  \n  describe('权限验证', () => {\n    let adminToken, userToken;\n    \n    beforeAll(async () => {\n      // 获取管理员token\n      adminToken = await global.authUtils.loginAsAdmin();\n      \n      // 获取普通用户token\n      const loginResponse = await global.apiUtils.post('/api/auth/login', {\n        username: testUser.username,\n        password: 'newpassword123' // 使用修改后的密码\n      });\n      userToken = loginResponse.data.data.token;\n    });\n    \n    test('管理员访问管理接口', async () => {\n      const headers = global.authUtils.getAuthHeaders(adminToken);\n      \n      const response = await global.apiUtils.get('/api/users', headers);\n      \n      global.assertUtils.expectSuccess(response);\n    });\n    \n    test('普通用户访问管理接口应失败', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      \n      const response = await global.apiUtils.get('/api/users', headers);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n    \n    test('普通用户访问自己的资源', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      \n      const response = await global.apiUtils.get('/api/auth/profile', headers);\n      \n      global.assertUtils.expectSuccess(response);\n    });\n  });\n  \n  describe('登出功能', () => {\n    let userToken;\n    \n    beforeAll(async () => {\n      const loginResponse = await global.apiUtils.post('/api/auth/login', {\n        username: testUser.username,\n        password: 'newpassword123'\n      });\n      userToken = loginResponse.data.data.token;\n    });\n    \n    test('正常登出', async () => {\n      const headers = global.authUtils.getAuthHeaders(userToken);\n      \n      const response = await global.apiUtils.post('/api/auth/logout', {}, headers);\n      \n      global.assertUtils.expectSuccess(response);\n      \n      // 验证token已失效\n      const profileResponse = await global.apiUtils.get('/api/auth/profile', headers);\n      global.assertUtils.expectError(profileResponse, 401);\n    });\n    \n    test('无token登出应失败', async () => {\n      const response = await global.apiUtils.post('/api/auth/logout');\n      \n      global.assertUtils.expectError(response, 401);\n    });\n  });\n  \n  describe('安全测试', () => {\n    test('SQL注入防护', async () => {\n      const maliciousData = {\n        username: \"admin'; DROP TABLE users; --\",\n        password: 'password'\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', maliciousData);\n      \n      // 应该返回正常的认证失败，而不是服务器错误\n      expect(response.status).toBe(401);\n    });\n    \n    test('XSS防护', async () => {\n      const xssData = {\n        username: '<script>alert(\"xss\")</script>',\n        password: 'password'\n      };\n      \n      const response = await global.apiUtils.post('/api/auth/login', xssData);\n      \n      // 应该返回正常的认证失败\n      expect(response.status).toBe(401);\n      // 响应中不应包含脚本标签\n      expect(JSON.stringify(response.data)).not.toContain('<script>');\n    });\n    \n    test('暴力破解防护', async () => {\n      const loginData = {\n        username: testUser.username,\n        password: 'wrongpassword'\n      };\n      \n      // 连续多次错误登录\n      const attempts = [];\n      for (let i = 0; i < 6; i++) {\n        attempts.push(global.apiUtils.post('/api/auth/login', loginData));\n      }\n      \n      const responses = await Promise.all(attempts);\n      \n      // 前几次应该是认证失败\n      expect(responses[0].status).toBe(401);\n      \n      // 后面的请求应该被限制（可能是429状态码）\n      const lastResponse = responses[responses.length - 1];\n      expect([401, 429]).toContain(lastResponse.status);\n    }, 30000);\n  });\n  \n  describe('性能测试', () => {\n    test('登录响应时间', async () => {\n      const loginData = {\n        username: global.ADMIN_USERNAME,\n        password: global.ADMIN_PASSWORD\n      };\n      \n      const startTime = Date.now();\n      const response = await global.apiUtils.post('/api/auth/login', loginData);\n      const endTime = Date.now();\n      \n      const responseTime = endTime - startTime;\n      \n      global.assertUtils.expectSuccess(response);\n      expect(responseTime).toBeLessThan(2000); // 登录应在2秒内完成\n    });\n    \n    test('并发登录', async () => {\n      const loginData = {\n        username: global.ADMIN_USERNAME,\n        password: global.ADMIN_PASSWORD\n      };\n      \n      // 并发10个登录请求\n      const promises = Array(10).fill().map(() => \n        global.apiUtils.post('/api/auth/login', loginData)\n      );\n      \n      const startTime = Date.now();\n      const responses = await Promise.all(promises);\n      const endTime = Date.now();\n      \n      const totalTime = endTime - startTime;\n      \n      // 所有请求都应该成功\n      responses.forEach(response => {\n        global.assertUtils.expectSuccess(response);\n      });\n      \n      // 并发处理时间应该合理\n      expect(totalTime).toBeLessThan(5000);\n    }, 10000);\n  });\n});"],"mappings":"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","ignoreList":[]}