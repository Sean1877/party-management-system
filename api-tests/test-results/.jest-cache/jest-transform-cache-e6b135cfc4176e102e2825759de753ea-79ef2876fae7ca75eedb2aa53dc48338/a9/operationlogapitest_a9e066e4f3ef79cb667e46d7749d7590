fadc97a7f2e6315f9d67f8f6f48f008f
const request = require('supertest');
const {
  expect
} = require('chai');

// 测试配置
const BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080';
const API_PREFIX = '/api';

// 测试数据
let authToken = '';
let testOperationLogId = null;
describe('操作日志 API 测试', () => {
  // 测试前的准备工作
  before(async () => {
    // 登录获取认证token
    const loginResponse = await request(BASE_URL).post(`${API_PREFIX}/api/auth/login`).send({
      username: 'admin',
      password: 'admin123'
    });
    expect(loginResponse.status).to.equal(200);
    authToken = loginResponse.body.data.token;
  });
  describe('操作日志查询 API', () => {
    it('应该能够获取所有操作日志列表', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够分页获取操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/page?page=0&size=10`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('content');
      expect(response.body.data).to.have.property('totalElements');
      expect(response.body.data).to.have.property('totalPages');
      expect(response.body.data).to.have.property('size');
      expect(response.body.data).to.have.property('number');
    });
    it('应该能够根据用户ID查询操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/user/1`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够根据操作类型查询操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/type/CREATE`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够根据操作模块查询操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/module/USER_MANAGEMENT`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够根据日期范围查询操作日志', async () => {
      const startDate = '2024-01-01T00:00:00';
      const endDate = '2024-12-31T23:59:59';
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/date-range?startDate=${startDate}&endDate=${endDate}`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够根据IP地址查询操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/ip/127.0.0.1`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够根据ID获取特定的操作日志', async () => {
      // 首先获取一个日志ID
      const listResponse = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/page?page=0&size=1`).set('Authorization', `Bearer ${authToken}`);
      if (listResponse.body.data.content.length > 0) {
        const logId = listResponse.body.data.content[0].id;
        const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/${logId}`).set('Authorization', `Bearer ${authToken}`);
        expect(response.status).to.equal(200);
        expect(response.body.success).to.be.true;
        expect(response.body.data.id).to.equal(logId);
      }
    });
  });
  describe('操作日志统计 API', () => {
    it('应该能够获取操作类型统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/operation-types`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够获取操作模块统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/operation-modules`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够获取用户操作统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/user-operations?limit=10`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够获取每日操作统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/daily-operations?days=30`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
    it('应该能够获取操作响应时间统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/response-times`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('averageTime');
      expect(response.body.data).to.have.property('maxTime');
      expect(response.body.data).to.have.property('minTime');
    });
    it('应该能够获取错误操作统计', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/statistics/error-operations`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.be.an('array');
    });
  });
  describe('操作日志管理 API', () => {
    it('应该能够手动创建操作日志（仅用于测试）', async () => {
      const logData = {
        userId: 1,
        username: 'testuser',
        operationType: 'TEST',
        operationModule: 'API_TEST',
        operationDescription: 'API测试创建的日志',
        requestMethod: 'POST',
        requestUrl: '/api/test',
        requestParams: '{"test": true}',
        responseStatus: 200,
        executionTime: 100,
        ipAddress: '127.0.0.1',
        userAgent: 'Test Agent'
      };
      const response = await request(BASE_URL).post(`${API_PREFIX}/operation-logs`).set('Authorization', `Bearer ${authToken}`).send(logData);
      expect(response.status).to.equal(201);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('id');
      expect(response.body.data.operationType).to.equal(logData.operationType);
      testOperationLogId = response.body.data.id;
    });
    it('应该能够批量删除过期的操作日志', async () => {
      const startDate = '2023-01-01T00:00:00';
      const endDate = '2023-12-31T23:59:59';
      const response = await request(BASE_URL).delete(`${API_PREFIX}/operation-logs/batch-delete`).set('Authorization', `Bearer ${authToken}`).send({
        startDate: startDate,
        endDate: endDate
      });
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('deletedCount');
      expect(response.body.data.deletedCount).to.be.a('number');
    });
    it('应该能够导出操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/export?format=csv&startDate=2024-01-01&endDate=2024-12-31`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.headers['content-type']).to.include('text/csv');
    });
    it('应该能够导出Excel格式的操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/export?format=excel&startDate=2024-01-01&endDate=2024-12-31`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.headers['content-type']).to.include('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    });
  });
  describe('操作日志搜索 API', () => {
    it('应该能够根据关键词搜索操作日志', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/search?keyword=用户&page=0&size=10`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('content');
      expect(response.body.data).to.have.property('totalElements');
    });
    it('应该能够组合条件搜索操作日志', async () => {
      const searchParams = {
        operationType: 'CREATE',
        operationModule: 'USER_MANAGEMENT',
        startDate: '2024-01-01T00:00:00',
        endDate: '2024-12-31T23:59:59',
        page: 0,
        size: 10
      };
      const queryString = new URLSearchParams(searchParams).toString();
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/advanced-search?${queryString}`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(200);
      expect(response.body.success).to.be.true;
      expect(response.body.data).to.have.property('content');
    });
  });
  describe('权限控制测试', () => {
    it('应该在未授权时返回401错误', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs`);
      expect(response.status).to.equal(401);
    });
    it('应该在访问不存在的日志时返回404错误', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/99999`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(404);
    });
    it('应该在提交无效搜索参数时返回400错误', async () => {
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/date-range?startDate=invalid-date&endDate=invalid-date`).set('Authorization', `Bearer ${authToken}`);
      expect(response.status).to.equal(400);
    });
  });
  describe('性能测试', () => {
    it('应该能够在合理时间内返回大量日志数据', async () => {
      const startTime = Date.now();
      const response = await request(BASE_URL).get(`${API_PREFIX}/operation-logs/page?page=0&size=100`).set('Authorization', `Bearer ${authToken}`);
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      expect(response.status).to.equal(200);
      expect(responseTime).to.be.lessThan(5000); // 响应时间应小于5秒
    });
    it('应该能够处理并发请求', async () => {
      const promises = [];

      // 创建10个并发请求
      for (let i = 0; i < 10; i++) {
        promises.push(request(BASE_URL).get(`${API_PREFIX}/operation-logs/page?page=${i}&size=10`).set('Authorization', `Bearer ${authToken}`));
      }
      const responses = await Promise.all(promises);
      responses.forEach(response => {
        expect(response.status).to.equal(200);
        expect(response.body.success).to.be.true;
      });
    });
  });

  // 清理测试数据
  after(async () => {
    // 删除测试创建的操作日志
    if (testOperationLogId) {
      await request(BASE_URL).delete(`${API_PREFIX}/operation-logs/${testOperationLogId}`).set('Authorization', `Bearer ${authToken}`);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1ZXN0IiwicmVxdWlyZSIsImV4cGVjdCIsIkJBU0VfVVJMIiwicHJvY2VzcyIsImVudiIsIkFQSV9CQVNFX1VSTCIsIkFQSV9QUkVGSVgiLCJhdXRoVG9rZW4iLCJ0ZXN0T3BlcmF0aW9uTG9nSWQiLCJkZXNjcmliZSIsImJlZm9yZSIsImxvZ2luUmVzcG9uc2UiLCJwb3N0Iiwic2VuZCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJzdGF0dXMiLCJ0byIsImVxdWFsIiwiYm9keSIsImRhdGEiLCJ0b2tlbiIsIml0IiwicmVzcG9uc2UiLCJnZXQiLCJzZXQiLCJzdWNjZXNzIiwiYmUiLCJ0cnVlIiwiYW4iLCJoYXZlIiwicHJvcGVydHkiLCJzdGFydERhdGUiLCJlbmREYXRlIiwibGlzdFJlc3BvbnNlIiwiY29udGVudCIsImxlbmd0aCIsImxvZ0lkIiwiaWQiLCJsb2dEYXRhIiwidXNlcklkIiwib3BlcmF0aW9uVHlwZSIsIm9wZXJhdGlvbk1vZHVsZSIsIm9wZXJhdGlvbkRlc2NyaXB0aW9uIiwicmVxdWVzdE1ldGhvZCIsInJlcXVlc3RVcmwiLCJyZXF1ZXN0UGFyYW1zIiwicmVzcG9uc2VTdGF0dXMiLCJleGVjdXRpb25UaW1lIiwiaXBBZGRyZXNzIiwidXNlckFnZW50IiwiZGVsZXRlIiwiZGVsZXRlZENvdW50IiwiYSIsImhlYWRlcnMiLCJpbmNsdWRlIiwic2VhcmNoUGFyYW1zIiwicGFnZSIsInNpemUiLCJxdWVyeVN0cmluZyIsIlVSTFNlYXJjaFBhcmFtcyIsInRvU3RyaW5nIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsImVuZFRpbWUiLCJyZXNwb25zZVRpbWUiLCJsZXNzVGhhbiIsInByb21pc2VzIiwiaSIsInB1c2giLCJyZXNwb25zZXMiLCJQcm9taXNlIiwiYWxsIiwiZm9yRWFjaCIsImFmdGVyIl0sInNvdXJjZXMiOlsib3BlcmF0aW9uLWxvZy1hcGkudGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXF1ZXN0ID0gcmVxdWlyZSgnc3VwZXJ0ZXN0Jyk7XG5jb25zdCB7IGV4cGVjdCB9ID0gcmVxdWlyZSgnY2hhaScpO1xuXG4vLyDmtYvor5XphY3nva5cbmNvbnN0IEJBU0VfVVJMID0gcHJvY2Vzcy5lbnYuQVBJX0JBU0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjgwODAnO1xuY29uc3QgQVBJX1BSRUZJWCA9ICcvYXBpJztcblxuLy8g5rWL6K+V5pWw5o2uXG5sZXQgYXV0aFRva2VuID0gJyc7XG5sZXQgdGVzdE9wZXJhdGlvbkxvZ0lkID0gbnVsbDtcblxuZGVzY3JpYmUoJ+aTjeS9nOaXpeW/lyBBUEkg5rWL6K+VJywgKCkgPT4ge1xuICAvLyDmtYvor5XliY3nmoTlh4blpIflt6XkvZxcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAvLyDnmbvlvZXojrflj5borqTor4F0b2tlblxuICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgLnBvc3QoYCR7QVBJX1BSRUZJWH0vYXBpL2F1dGgvbG9naW5gKVxuICAgICAgLnNlbmQoe1xuICAgICAgICB1c2VybmFtZTogJ2FkbWluJyxcbiAgICAgICAgcGFzc3dvcmQ6ICdhZG1pbjEyMydcbiAgICAgIH0pO1xuICAgIFxuICAgIGV4cGVjdChsb2dpblJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAwKTtcbiAgICBhdXRoVG9rZW4gPSBsb2dpblJlc3BvbnNlLmJvZHkuZGF0YS50b2tlbjtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+aTjeS9nOaXpeW/l+afpeivoiBBUEknLCAoKSA9PiB7XG4gICAgaXQoJ+W6lOivpeiDveWkn+iOt+WPluaJgOacieaTjeS9nOaXpeW/l+WIl+ihqCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9nc2ApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+WIhumhteiOt+WPluaTjeS9nOaXpeW/lycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9wYWdlP3BhZ2U9MCZzaXplPTEwYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnY29udGVudCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgndG90YWxFbGVtZW50cycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgndG90YWxQYWdlcycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnc2l6ZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnbnVtYmVyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l6IO95aSf5qC55o2u55So5oi3SUTmn6Xor6Lmk43kvZzml6Xlv5cnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvdXNlci8xYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uYmUuYW4oJ2FycmF5Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l6IO95aSf5qC55o2u5pON5L2c57G75Z6L5p+l6K+i5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL3R5cGUvQ1JFQVRFYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uYmUuYW4oJ2FycmF5Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l6IO95aSf5qC55o2u5pON5L2c5qih5Z2X5p+l6K+i5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL21vZHVsZS9VU0VSX01BTkFHRU1FTlRgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50by5iZS5hbignYXJyYXknKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/moLnmja7ml6XmnJ/ojIPlm7Tmn6Xor6Lmk43kvZzml6Xlv5cnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFydERhdGUgPSAnMjAyNC0wMS0wMVQwMDowMDowMCc7XG4gICAgICBjb25zdCBlbmREYXRlID0gJzIwMjQtMTItMzFUMjM6NTk6NTknO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvZGF0ZS1yYW5nZT9zdGFydERhdGU9JHtzdGFydERhdGV9JmVuZERhdGU9JHtlbmREYXRlfWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+agueaNrklQ5Zyw5Z2A5p+l6K+i5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL2lwLzEyNy4wLjAuMWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+agueaNrklE6I635Y+W54m55a6a55qE5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8g6aaW5YWI6I635Y+W5LiA5Liq5pel5b+XSURcbiAgICAgIGNvbnN0IGxpc3RSZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvcGFnZT9wYWdlPTAmc2l6ZT0xYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGlmIChsaXN0UmVzcG9uc2UuYm9keS5kYXRhLmNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBsb2dJZCA9IGxpc3RSZXNwb25zZS5ib2R5LmRhdGEuY29udGVudFswXS5pZDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzLyR7bG9nSWR9YClcbiAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcblxuICAgICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmlkKS50by5lcXVhbChsb2dJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfmk43kvZzml6Xlv5fnu5/orqEgQVBJJywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xog73lpJ/ojrflj5bmk43kvZznsbvlnovnu5/orqEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3Mvc3RhdGlzdGljcy9vcGVyYXRpb24tdHlwZXNgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50by5iZS5hbignYXJyYXknKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/ojrflj5bmk43kvZzmqKHlnZfnu5/orqEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3Mvc3RhdGlzdGljcy9vcGVyYXRpb24tbW9kdWxlc2ApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+iOt+WPlueUqOaIt+aTjeS9nOe7n+iuoScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9zdGF0aXN0aWNzL3VzZXItb3BlcmF0aW9ucz9saW1pdD0xMGApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+iOt+WPluavj+aXpeaTjeS9nOe7n+iuoScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9zdGF0aXN0aWNzL2RhaWx5LW9wZXJhdGlvbnM/ZGF5cz0zMGApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmJlLmFuKCdhcnJheScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+iOt+WPluaTjeS9nOWTjeW6lOaXtumXtOe7n+iuoScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9zdGF0aXN0aWNzL3Jlc3BvbnNlLXRpbWVzYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnYXZlcmFnZVRpbWUnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ21heFRpbWUnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ21pblRpbWUnKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/ojrflj5bplJnor6/mk43kvZznu5/orqEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3Mvc3RhdGlzdGljcy9lcnJvci1vcGVyYXRpb25zYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdWNjZXNzKS50by5iZS50cnVlO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG8uYmUuYW4oJ2FycmF5Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCfmk43kvZzml6Xlv5fnrqHnkIYgQVBJJywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xog73lpJ/miYvliqjliJvlu7rmk43kvZzml6Xlv5fvvIjku4XnlKjkuo7mtYvor5XvvIknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsb2dEYXRhID0ge1xuICAgICAgICB1c2VySWQ6IDEsXG4gICAgICAgIHVzZXJuYW1lOiAndGVzdHVzZXInLFxuICAgICAgICBvcGVyYXRpb25UeXBlOiAnVEVTVCcsXG4gICAgICAgIG9wZXJhdGlvbk1vZHVsZTogJ0FQSV9URVNUJyxcbiAgICAgICAgb3BlcmF0aW9uRGVzY3JpcHRpb246ICdBUEnmtYvor5XliJvlu7rnmoTml6Xlv5cnLFxuICAgICAgICByZXF1ZXN0TWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHJlcXVlc3RVcmw6ICcvYXBpL3Rlc3QnLFxuICAgICAgICByZXF1ZXN0UGFyYW1zOiAne1widGVzdFwiOiB0cnVlfScsXG4gICAgICAgIHJlc3BvbnNlU3RhdHVzOiAyMDAsXG4gICAgICAgIGV4ZWN1dGlvblRpbWU6IDEwMCxcbiAgICAgICAgaXBBZGRyZXNzOiAnMTI3LjAuMC4xJyxcbiAgICAgICAgdXNlckFnZW50OiAnVGVzdCBBZ2VudCdcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLnBvc3QoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3NgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZChsb2dEYXRhKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN1Y2Nlc3MpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhKS50by5oYXZlLnByb3BlcnR5KCdpZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5vcGVyYXRpb25UeXBlKS50by5lcXVhbChsb2dEYXRhLm9wZXJhdGlvblR5cGUpO1xuICAgICAgXG4gICAgICB0ZXN0T3BlcmF0aW9uTG9nSWQgPSByZXNwb25zZS5ib2R5LmRhdGEuaWQ7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l6IO95aSf5om56YeP5Yig6Zmk6L+H5pyf55qE5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnREYXRlID0gJzIwMjMtMDEtMDFUMDA6MDA6MDAnO1xuICAgICAgY29uc3QgZW5kRGF0ZSA9ICcyMDIzLTEyLTMxVDIzOjU5OjU5JztcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZGVsZXRlKGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL2JhdGNoLWRlbGV0ZWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ2RlbGV0ZWRDb3VudCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YS5kZWxldGVkQ291bnQpLnRvLmJlLmEoJ251bWJlcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W6lOivpeiDveWkn+WvvOWHuuaTjeS9nOaXpeW/lycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9leHBvcnQ/Zm9ybWF0PWNzdiZzdGFydERhdGU9MjAyNC0wMS0wMSZlbmREYXRlPTIwMjQtMTItMzFgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAwKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSkudG8uaW5jbHVkZSgndGV4dC9jc3YnKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/lr7zlh7pFeGNlbOagvOW8j+eahOaTjeS9nOaXpeW/lycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgLmdldChgJHtBUElfUFJFRklYfS9vcGVyYXRpb24tbG9ncy9leHBvcnQ/Zm9ybWF0PWV4Y2VsJnN0YXJ0RGF0ZT0yMDI0LTAxLTAxJmVuZERhdGU9MjAyNC0xMi0zMWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKS50by5pbmNsdWRlKCdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5pON5L2c5pel5b+X5pCc57SiIEFQSScsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l6IO95aSf5qC55o2u5YWz6ZSu6K+N5pCc57Si5pON5L2c5pel5b+XJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL3NlYXJjaD9rZXl3b3JkPeeUqOaItyZwYWdlPTAmc2l6ZT0xMGApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ2NvbnRlbnQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ3RvdGFsRWxlbWVudHMnKTtcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/nu4TlkIjmnaHku7bmkJzntKLmk43kvZzml6Xlv5cnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzZWFyY2hQYXJhbXMgPSB7XG4gICAgICAgIG9wZXJhdGlvblR5cGU6ICdDUkVBVEUnLFxuICAgICAgICBvcGVyYXRpb25Nb2R1bGU6ICdVU0VSX01BTkFHRU1FTlQnLFxuICAgICAgICBzdGFydERhdGU6ICcyMDI0LTAxLTAxVDAwOjAwOjAwJyxcbiAgICAgICAgZW5kRGF0ZTogJzIwMjQtMTItMzFUMjM6NTk6NTknLFxuICAgICAgICBwYWdlOiAwLFxuICAgICAgICBzaXplOiAxMFxuICAgICAgfTtcblxuICAgICAgY29uc3QgcXVlcnlTdHJpbmcgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaFBhcmFtcykudG9TdHJpbmcoKTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL2FkdmFuY2VkLXNlYXJjaD8ke3F1ZXJ5U3RyaW5nfWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvLmhhdmUucHJvcGVydHkoJ2NvbnRlbnQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ+adg+mZkOaOp+WItua1i+ivlScsICgpID0+IHtcbiAgICBpdCgn5bqU6K+l5Zyo5pyq5o6I5p2D5pe26L+U5ZueNDAx6ZSZ6K+vJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzYCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDQwMSk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l5Zyo6K6/6Zeu5LiN5a2Y5Zyo55qE5pel5b+X5pe26L+U5ZueNDA06ZSZ6K+vJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzLzk5OTk5YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvLmVxdWFsKDQwNCk7XG4gICAgfSk7XG5cbiAgICBpdCgn5bqU6K+l5Zyo5o+Q5Lqk5peg5pWI5pCc57Si5Y+C5pWw5pe26L+U5ZueNDAw6ZSZ6K+vJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KEJBU0VfVVJMKVxuICAgICAgICAuZ2V0KGAke0FQSV9QUkVGSVh9L29wZXJhdGlvbi1sb2dzL2RhdGUtcmFuZ2U/c3RhcnREYXRlPWludmFsaWQtZGF0ZSZlbmREYXRlPWludmFsaWQtZGF0ZWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCg0MDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgn5oCn6IO95rWL6K+VJywgKCkgPT4ge1xuICAgIGl0KCflupTor6Xog73lpJ/lnKjlkIjnkIbml7bpl7TlhoXov5Tlm57lpKfph4/ml6Xlv5fmlbDmja4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvcGFnZT9wYWdlPTAmc2l6ZT0xMDBgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKTtcblxuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCByZXNwb25zZVRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50by5lcXVhbCgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlVGltZSkudG8uYmUubGVzc1RoYW4oNTAwMCk7IC8vIOWTjeW6lOaXtumXtOW6lOWwj+S6jjXnp5JcbiAgICB9KTtcblxuICAgIGl0KCflupTor6Xog73lpJ/lpITnkIblubblj5Hor7fmsYInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICAgICAgXG4gICAgICAvLyDliJvlu7oxMOS4quW5tuWPkeivt+axglxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIHByb21pc2VzLnB1c2goXG4gICAgICAgICAgcmVxdWVzdChCQVNFX1VSTClcbiAgICAgICAgICAgIC5nZXQoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvcGFnZT9wYWdlPSR7aX0mc2l6ZT0xMGApXG4gICAgICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICBcbiAgICAgIHJlc3BvbnNlcy5mb3JFYWNoKHJlc3BvbnNlID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG8uZXF1YWwoMjAwKTtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3VjY2VzcykudG8uYmUudHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyDmuIXnkIbmtYvor5XmlbDmja5cbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIC8vIOWIoOmZpOa1i+ivleWIm+W7uueahOaTjeS9nOaXpeW/l1xuICAgIGlmICh0ZXN0T3BlcmF0aW9uTG9nSWQpIHtcbiAgICAgIGF3YWl0IHJlcXVlc3QoQkFTRV9VUkwpXG4gICAgICAgIC5kZWxldGUoYCR7QVBJX1BSRUZJWH0vb3BlcmF0aW9uLWxvZ3MvJHt0ZXN0T3BlcmF0aW9uTG9nSWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YCk7XG4gICAgfVxuICB9KTtcbn0pOyJdLCJtYXBwaW5n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