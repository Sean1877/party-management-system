{"version":3,"names":["describe","adminHeaders","userHeaders","testStandard","testPayment","beforeAll","global","authUtils","getAdminAuthHeaders","getUserAuthHeaders","dataUtils","generateFeeStandardData","test","response","apiUtils","post","assertUtils","expectSuccess","expect","data","toHaveProperty","name","toBe","memberType","baseAmount","id","testData","fees","standardData","expectError","incompleteData","invalidData","duplicateData","get","expectPaginatedResponse","list","toBeInstanceOf","Array","length","toBeGreaterThan","createdStandard","find","s","toBeDefined","forEach","standard","status","page","toBeLessThanOrEqual","updateData","description","put","deletableStandard","beforeEach","delete","getResponse","standardId","amount","paymentDate","Date","toISOString","split","paymentMethod","userPayment","payment","startDate","endDate","toBeGreaterThanOrEqual","deletablePayment","paymentData","totalStandards","totalPayments","totalAmount","paymentRate","firstItem","headers","toContain","params","format","queryString","URLSearchParams","toString","batchSize","payments","fill","map","Math","floor","random","startTime","now","promises","responses","Promise","all","endTime","totalTime","avgTime","toBeLessThan","console","log","responseTime"],"sources":["fees.test.js"],"sourcesContent":["/**\n * 党费管理API测试\n * 测试党费标准、党费缴纳记录等功能\n */\n\ndescribe('党费管理API测试', () => {\n  let adminHeaders;\n  let userHeaders;\n  let testStandard;\n  let testPayment;\n  \n  beforeAll(async () => {\n    // 获取管理员和用户认证头\n    adminHeaders = await global.authUtils.getAdminAuthHeaders();\n    userHeaders = await global.authUtils.getUserAuthHeaders();\n    \n    // 生成测试数据\n    testStandard = global.dataUtils.generateFeeStandardData();\n  });\n  \n  describe('党费标准管理', () => {\n    describe('创建党费标准', () => {\n      test('管理员创建党费标准', async () => {\n        const response = await global.apiUtils.post('/fees/standards', testStandard, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data).toHaveProperty('id');\n        expect(response.data.data.name).toBe(testStandard.name);\n        expect(response.data.data.memberType).toBe(testStandard.memberType);\n        expect(response.data.data.baseAmount).toBe(testStandard.baseAmount);\n        \n        // 保存标准ID用于后续测试\n        testStandard.id = response.data.data.id;\n        global.testData.fees[testStandard.id] = response.data.data;\n      });\n      \n      test('普通用户创建党费标准应失败', async () => {\n        const standardData = global.dataUtils.generateFeeStandardData();\n        \n        const response = await global.apiUtils.post('/fees/standards', standardData, userHeaders);\n        \n        global.assertUtils.expectError(response, 403, '权限不足');\n      });\n      \n      test('缺少必填字段创建应失败', async () => {\n        const incompleteData = {\n          name: '测试标准',\n          // 缺少memberType和baseAmount\n        };\n        \n        const response = await global.apiUtils.post('/fees/standards', incompleteData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400);\n      });\n      \n      test('无效金额创建应失败', async () => {\n        const invalidData = {\n          ...testStandard,\n          baseAmount: -100 // 负数金额\n        };\n        \n        const response = await global.apiUtils.post('/fees/standards', invalidData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400, '金额');\n      });\n      \n      test('重复名称创建应失败', async () => {\n        const duplicateData = {\n          ...testStandard,\n          name: testStandard.name // 使用已存在的名称\n        };\n        \n        const response = await global.apiUtils.post('/fees/standards', duplicateData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400, '名称已存在');\n      });\n    });\n    \n    describe('查询党费标准', () => {\n      test('获取党费标准列表', async () => {\n        const response = await global.apiUtils.get('/fees/standards', adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        expect(response.data.data.list).toBeInstanceOf(Array);\n        expect(response.data.data.list.length).toBeGreaterThan(0);\n        \n        // 验证列表中包含我们创建的标准\n        const createdStandard = response.data.data.list.find(s => s.id === testStandard.id);\n        expect(createdStandard).toBeDefined();\n      });\n      \n      test('按会员类型筛选党费标准', async () => {\n        const response = await global.apiUtils.get(`/fees/standards?memberType=${testStandard.memberType}`, adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(standard => {\n          expect(standard.memberType).toBe(testStandard.memberType);\n        });\n      });\n      \n      test('按状态筛选党费标准', async () => {\n        const response = await global.apiUtils.get('/fees/standards?status=active', adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(standard => {\n          expect(standard.status).toBe('active');\n        });\n      });\n      \n      test('分页查询党费标准', async () => {\n        const response = await global.apiUtils.get('/fees/standards?page=1&pageSize=5', adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response, 5);\n        expect(response.data.data.page).toBe(1);\n        expect(response.data.data.list.length).toBeLessThanOrEqual(5);\n      });\n      \n      test('获取单个党费标准详情', async () => {\n        const response = await global.apiUtils.get(`/fees/standards/${testStandard.id}`, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data.id).toBe(testStandard.id);\n        expect(response.data.data.name).toBe(testStandard.name);\n      });\n      \n      test('获取不存在的党费标准应失败', async () => {\n        const response = await global.apiUtils.get('/fees/standards/999999', adminHeaders);\n        \n        global.assertUtils.expectError(response, 404, '未找到');\n      });\n    });\n    \n    describe('更新党费标准', () => {\n      test('管理员更新党费标准', async () => {\n        const updateData = {\n          name: '更新后的党费标准',\n          baseAmount: testStandard.baseAmount + 50,\n          description: '更新后的描述'\n        };\n        \n        const response = await global.apiUtils.put(`/fees/standards/${testStandard.id}`, updateData, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data.name).toBe(updateData.name);\n        expect(response.data.data.baseAmount).toBe(updateData.baseAmount);\n        expect(response.data.data.description).toBe(updateData.description);\n      });\n      \n      test('普通用户更新党费标准应失败', async () => {\n        const updateData = {\n          name: '用户尝试更新'\n        };\n        \n        const response = await global.apiUtils.put(`/fees/standards/${testStandard.id}`, updateData, userHeaders);\n        \n        global.assertUtils.expectError(response, 403, '权限不足');\n      });\n      \n      test('更新不存在的党费标准应失败', async () => {\n        const updateData = {\n          name: '更新不存在的标准'\n        };\n        \n        const response = await global.apiUtils.put('/fees/standards/999999', updateData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 404, '未找到');\n      });\n    });\n    \n    describe('删除党费标准', () => {\n      let deletableStandard;\n      \n      beforeEach(async () => {\n        // 创建一个可删除的标准\n        const standardData = global.dataUtils.generateFeeStandardData();\n        const response = await global.apiUtils.post('/fees/standards', standardData, adminHeaders);\n        deletableStandard = response.data.data;\n      });\n      \n      test('管理员删除党费标准', async () => {\n        const response = await global.apiUtils.delete(`/fees/standards/${deletableStandard.id}`, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        \n        // 验证标准已被删除\n        const getResponse = await global.apiUtils.get(`/fees/standards/${deletableStandard.id}`, adminHeaders);\n        global.assertUtils.expectError(getResponse, 404);\n      });\n      \n      test('普通用户删除党费标准应失败', async () => {\n        const response = await global.apiUtils.delete(`/fees/standards/${deletableStandard.id}`, userHeaders);\n        \n        global.assertUtils.expectError(response, 403, '权限不足');\n      });\n      \n      test('删除不存在的党费标准应失败', async () => {\n        const response = await global.apiUtils.delete('/fees/standards/999999', adminHeaders);\n        \n        global.assertUtils.expectError(response, 404, '未找到');\n      });\n    });\n  });\n  \n  describe('党费缴纳记录管理', () => {\n    beforeAll(() => {\n      testPayment = {\n        standardId: testStandard.id,\n        amount: testStandard.baseAmount,\n        paymentDate: new Date().toISOString().split('T')[0],\n        paymentMethod: 'bank_transfer',\n        description: '测试缴费记录'\n      };\n    });\n    \n    describe('创建缴费记录', () => {\n      test('管理员创建缴费记录', async () => {\n        const response = await global.apiUtils.post('/fees/payments', testPayment, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data).toHaveProperty('id');\n        expect(response.data.data.amount).toBe(testPayment.amount);\n        expect(response.data.data.paymentMethod).toBe(testPayment.paymentMethod);\n        \n        // 保存缴费记录ID\n        testPayment.id = response.data.data.id;\n      });\n      \n      test('用户为自己创建缴费记录', async () => {\n        const userPayment = {\n          ...testPayment,\n          description: '用户自己缴费'\n        };\n        \n        const response = await global.apiUtils.post('/fees/payments', userPayment, userHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data.amount).toBe(userPayment.amount);\n      });\n      \n      test('缺少必填字段创建应失败', async () => {\n        const incompleteData = {\n          amount: 100\n          // 缺少standardId和paymentDate\n        };\n        \n        const response = await global.apiUtils.post('/fees/payments', incompleteData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400);\n      });\n      \n      test('无效金额创建应失败', async () => {\n        const invalidData = {\n          ...testPayment,\n          amount: -50 // 负数金额\n        };\n        \n        const response = await global.apiUtils.post('/fees/payments', invalidData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400, '金额');\n      });\n      \n      test('无效标准ID创建应失败', async () => {\n        const invalidData = {\n          ...testPayment,\n          standardId: 999999 // 不存在的标准ID\n        };\n        \n        const response = await global.apiUtils.post('/fees/payments', invalidData, adminHeaders);\n        \n        global.assertUtils.expectError(response, 400, '标准不存在');\n      });\n    });\n    \n    describe('查询缴费记录', () => {\n      test('获取缴费记录列表', async () => {\n        const response = await global.apiUtils.get('/fees/payments', adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        expect(response.data.data.list).toBeInstanceOf(Array);\n        expect(response.data.data.list.length).toBeGreaterThan(0);\n      });\n      \n      test('按标准ID筛选缴费记录', async () => {\n        const response = await global.apiUtils.get(`/fees/payments?standardId=${testStandard.id}`, adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(payment => {\n          expect(payment.standardId).toBe(testStandard.id);\n        });\n      });\n      \n      test('按缴费方式筛选记录', async () => {\n        const response = await global.apiUtils.get('/fees/payments?paymentMethod=bank_transfer', adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(payment => {\n          expect(payment.paymentMethod).toBe('bank_transfer');\n        });\n      });\n      \n      test('按日期范围筛选记录', async () => {\n        const startDate = '2024-01-01';\n        const endDate = '2024-12-31';\n        \n        const response = await global.apiUtils.get(`/fees/payments?startDate=${startDate}&endDate=${endDate}`, adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(payment => {\n          expect(payment.paymentDate).toBeGreaterThanOrEqual(startDate);\n          expect(payment.paymentDate).toBeLessThanOrEqual(endDate);\n        });\n      });\n      \n      test('获取单个缴费记录详情', async () => {\n        const response = await global.apiUtils.get(`/fees/payments/${testPayment.id}`, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data.id).toBe(testPayment.id);\n        expect(response.data.data.amount).toBe(testPayment.amount);\n      });\n      \n      test('用户只能查看自己的缴费记录', async () => {\n        const response = await global.apiUtils.get('/fees/payments', userHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        // 用户应该只能看到自己的记录\n        // 这里需要根据实际的用户ID进行验证\n      });\n    });\n    \n    describe('更新缴费记录', () => {\n      test('管理员更新缴费记录', async () => {\n        const updateData = {\n          amount: testPayment.amount + 10,\n          description: '更新后的描述'\n        };\n        \n        const response = await global.apiUtils.put(`/fees/payments/${testPayment.id}`, updateData, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        expect(response.data.data.amount).toBe(updateData.amount);\n        expect(response.data.data.description).toBe(updateData.description);\n      });\n      \n      test('普通用户更新他人缴费记录应失败', async () => {\n        const updateData = {\n          amount: 999\n        };\n        \n        const response = await global.apiUtils.put(`/fees/payments/${testPayment.id}`, updateData, userHeaders);\n        \n        global.assertUtils.expectError(response, 403, '权限不足');\n      });\n    });\n    \n    describe('删除缴费记录', () => {\n      let deletablePayment;\n      \n      beforeEach(async () => {\n        // 创建一个可删除的缴费记录\n        const paymentData = {\n          ...testPayment,\n          description: '可删除的记录'\n        };\n        const response = await global.apiUtils.post('/fees/payments', paymentData, adminHeaders);\n        deletablePayment = response.data.data;\n      });\n      \n      test('管理员删除缴费记录', async () => {\n        const response = await global.apiUtils.delete(`/fees/payments/${deletablePayment.id}`, adminHeaders);\n        \n        global.assertUtils.expectSuccess(response);\n        \n        // 验证记录已被删除\n        const getResponse = await global.apiUtils.get(`/fees/payments/${deletablePayment.id}`, adminHeaders);\n        global.assertUtils.expectError(getResponse, 404);\n      });\n      \n      test('普通用户删除缴费记录应失败', async () => {\n        const response = await global.apiUtils.delete(`/fees/payments/${deletablePayment.id}`, userHeaders);\n        \n        global.assertUtils.expectError(response, 403, '权限不足');\n      });\n    });\n  });\n  \n  describe('党费统计分析', () => {\n    test('获取党费统计概览', async () => {\n      const response = await global.apiUtils.get('/fees/statistics/overview', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('totalStandards');\n      expect(response.data.data).toHaveProperty('totalPayments');\n      expect(response.data.data).toHaveProperty('totalAmount');\n      expect(response.data.data).toHaveProperty('paymentRate');\n      \n      // 验证数据类型\n      expect(typeof response.data.data.totalStandards).toBe('number');\n      expect(typeof response.data.data.totalPayments).toBe('number');\n      expect(typeof response.data.data.totalAmount).toBe('number');\n      expect(typeof response.data.data.paymentRate).toBe('number');\n    });\n    \n    test('获取月度缴费趋势', async () => {\n      const response = await global.apiUtils.get('/fees/statistics/monthly-trend', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('month');\n        expect(firstItem).toHaveProperty('amount');\n        expect(firstItem).toHaveProperty('count');\n      }\n    });\n    \n    test('获取缴费方式统计', async () => {\n      const response = await global.apiUtils.get('/fees/statistics/payment-methods', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('method');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('amount');\n      }\n    });\n    \n    test('按时间范围获取统计', async () => {\n      const startDate = '2024-01-01';\n      const endDate = '2024-12-31';\n      \n      const response = await global.apiUtils.get(`/fees/statistics/overview?startDate=${startDate}&endDate=${endDate}`, adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('totalAmount');\n    });\n    \n    test('普通用户获取统计应失败', async () => {\n      const response = await global.apiUtils.get('/fees/statistics/overview', userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n  });\n  \n  describe('党费导出功能', () => {\n    test('导出党费标准', async () => {\n      const response = await global.apiUtils.get('/fees/standards/export?format=excel', adminHeaders);\n      \n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('application/vnd.openxmlformats');\n    });\n    \n    test('导出缴费记录', async () => {\n      const response = await global.apiUtils.get('/fees/payments/export?format=excel', adminHeaders);\n      \n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('application/vnd.openxmlformats');\n    });\n    \n    test('按条件导出缴费记录', async () => {\n      const params = {\n        format: 'excel',\n        startDate: '2024-01-01',\n        endDate: '2024-12-31',\n        paymentMethod: 'bank_transfer'\n      };\n      \n      const queryString = new URLSearchParams(params).toString();\n      const response = await global.apiUtils.get(`/fees/payments/export?${queryString}`, adminHeaders);\n      \n      expect(response.status).toBe(200);\n    });\n    \n    test('普通用户导出应失败', async () => {\n      const response = await global.apiUtils.get('/fees/standards/export', userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n  });\n  \n  describe('性能测试', () => {\n    test('批量创建缴费记录性能', async () => {\n      const batchSize = 50;\n      const payments = Array(batchSize).fill().map(() => ({\n        standardId: testStandard.id,\n        amount: Math.floor(Math.random() * 200) + 50,\n        paymentDate: new Date().toISOString().split('T')[0],\n        paymentMethod: 'bank_transfer',\n        description: '批量测试记录'\n      }));\n      \n      const startTime = Date.now();\n      \n      const promises = payments.map(payment => \n        global.apiUtils.post('/fees/payments', payment, adminHeaders)\n      );\n      \n      const responses = await Promise.all(promises);\n      const endTime = Date.now();\n      \n      const totalTime = endTime - startTime;\n      const avgTime = totalTime / batchSize;\n      \n      // 所有请求都应该成功\n      responses.forEach(response => {\n        global.assertUtils.expectSuccess(response);\n      });\n      \n      // 平均响应时间应该合理\n      expect(avgTime).toBeLessThan(1000); // 每个请求平均不超过1秒\n      \n      console.log(`批量创建${batchSize}条记录，总耗时：${totalTime}ms，平均：${avgTime}ms`);\n    }, 60000);\n    \n    test('大数据量查询性能', async () => {\n      const startTime = Date.now();\n      \n      const response = await global.apiUtils.get('/fees/payments?pageSize=1000', adminHeaders);\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      global.assertUtils.expectPaginatedResponse(response, 1000);\n      expect(responseTime).toBeLessThan(3000); // 大数据量查询应在3秒内完成\n      \n      console.log(`查询1000条记录耗时：${responseTime}ms`);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}