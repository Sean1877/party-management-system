{"version":3,"names":["describe","adminHeaders","userHeaders","testLogId","beforeAll","global","authUtils","getAdminAuthHeaders","getUserAuthHeaders","test","userData","dataUtils","generateUserData","createResponse","apiUtils","post","assertUtils","expectSuccess","Promise","resolve","setTimeout","logsResponse","get","expectPaginatedResponse","recentLog","data","list","expect","operation","toBe","module","description","toContain","loginData","username","testData","admin","password","loginResponse","loginLog","find","log","toBeDefined","status","invalidData","expectError","failureLog","errorMessage","response","toBeInstanceOf","Array","length","toBeGreaterThan","toHaveProperty","id","forEach","endDate","Date","toISOString","split","startDate","now","logDate","createdAt","toBeGreaterThanOrEqual","toBeLessThanOrEqual","allLogsResponse","ipAddress","keyword","searchText","toLowerCase","page","i","current","previous","getTime","currentUser","user","totalLogs","todayLogs","successRate","failureRate","firstItem","headers","params","format","queryString","URLSearchParams","toString","cleanupData","retentionDays","deletedCount","anomaly","startTime","endTime","responseTime","toBeLessThan","console","search","pageSize"],"sources":["operation-logs.test.js"],"sourcesContent":["/**\n * 操作日志API测试\n * 测试操作日志的记录、查询和分析功能\n */\n\ndescribe('操作日志API测试', () => {\n  let adminHeaders;\n  let userHeaders;\n  let testLogId;\n  \n  beforeAll(async () => {\n    // 获取管理员和用户认证头\n    adminHeaders = await global.authUtils.getAdminAuthHeaders();\n    userHeaders = await global.authUtils.getUserAuthHeaders();\n  });\n  \n  describe('操作日志记录', () => {\n    test('用户操作自动记录日志', async () => {\n      // 执行一个会产生日志的操作（创建用户）\n      const userData = global.dataUtils.generateUserData();\n      const createResponse = await global.apiUtils.post('/users', userData, adminHeaders);\n      \n      global.assertUtils.expectSuccess(createResponse);\n      \n      // 等待日志记录\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // 查询最近的操作日志\n      const logsResponse = await global.apiUtils.get('/operation-logs?pageSize=10&sortBy=createdAt&sortOrder=desc', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(logsResponse);\n      \n      // 验证日志记录\n      const recentLog = logsResponse.data.data.list[0];\n      expect(recentLog.operation).toBe('CREATE');\n      expect(recentLog.module).toBe('USER');\n      expect(recentLog.description).toContain('创建用户');\n    });\n    \n    test('登录操作记录日志', async () => {\n      // 执行登录操作\n      const loginData = {\n        username: global.testData.admin.username,\n        password: global.testData.admin.password\n      };\n      \n      const loginResponse = await global.apiUtils.post('/api/auth/login', loginData);\n      global.assertUtils.expectSuccess(loginResponse);\n      \n      // 等待日志记录\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // 查询登录日志\n      const logsResponse = await global.apiUtils.get('/operation-logs?operation=LOGIN&pageSize=10', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(logsResponse);\n      \n      // 验证登录日志\n      const loginLog = logsResponse.data.data.list.find(log => \n        log.operation === 'LOGIN' && log.username === loginData.username\n      );\n      expect(loginLog).toBeDefined();\n      expect(loginLog.module).toBe('AUTH');\n      expect(loginLog.status).toBe('SUCCESS');\n    });\n    \n    test('失败操作记录错误日志', async () => {\n      // 执行一个会失败的操作\n      const invalidData = {\n        username: '', // 无效用户名\n        password: 'test123'\n      };\n      \n      const loginResponse = await global.apiUtils.post('/api/auth/login', invalidData);\n      global.assertUtils.expectError(loginResponse, 400);\n      \n      // 等待日志记录\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // 查询失败日志\n      const logsResponse = await global.apiUtils.get('/operation-logs?status=FAILURE&pageSize=10', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(logsResponse);\n      \n      // 验证失败日志\n      const failureLog = logsResponse.data.data.list.find(log => \n        log.operation === 'LOGIN' && log.status === 'FAILURE'\n      );\n      expect(failureLog).toBeDefined();\n      expect(failureLog.errorMessage).toBeDefined();\n    });\n  });\n  \n  describe('查询操作日志', () => {\n    test('管理员获取操作日志列表', async () => {\n      const response = await global.apiUtils.get('/operation-logs', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      expect(response.data.data.list).toBeInstanceOf(Array);\n      expect(response.data.data.list.length).toBeGreaterThan(0);\n      \n      // 验证日志结构\n      const log = response.data.data.list[0];\n      expect(log).toHaveProperty('id');\n      expect(log).toHaveProperty('operation');\n      expect(log).toHaveProperty('module');\n      expect(log).toHaveProperty('username');\n      expect(log).toHaveProperty('ipAddress');\n      expect(log).toHaveProperty('userAgent');\n      expect(log).toHaveProperty('status');\n      expect(log).toHaveProperty('createdAt');\n      \n      testLogId = log.id;\n    });\n    \n    test('按操作类型筛选日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs?operation=LOGIN', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        expect(log.operation).toBe('LOGIN');\n      });\n    });\n    \n    test('按模块筛选日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs?module=USER', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        expect(log.module).toBe('USER');\n      });\n    });\n    \n    test('按用户筛选日志', async () => {\n      const username = global.testData.admin.username;\n      const response = await global.apiUtils.get(`/operation-logs?username=${username}`, adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        expect(log.username).toBe(username);\n      });\n    });\n    \n    test('按状态筛选日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs?status=SUCCESS', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        expect(log.status).toBe('SUCCESS');\n      });\n    });\n    \n    test('按时间范围筛选日志', async () => {\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      const response = await global.apiUtils.get(`/operation-logs?startDate=${startDate}&endDate=${endDate}`, adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        const logDate = log.createdAt.split('T')[0];\n        expect(logDate).toBeGreaterThanOrEqual(startDate);\n        expect(logDate).toBeLessThanOrEqual(endDate);\n      });\n    });\n    \n    test('按IP地址筛选日志', async () => {\n      // 先获取一个有效的IP地址\n      const allLogsResponse = await global.apiUtils.get('/operation-logs?pageSize=1', adminHeaders);\n      \n      if (allLogsResponse.data.data.list.length > 0) {\n        const ipAddress = allLogsResponse.data.data.list[0].ipAddress;\n        \n        const response = await global.apiUtils.get(`/operation-logs?ipAddress=${ipAddress}`, adminHeaders);\n        \n        global.assertUtils.expectPaginatedResponse(response);\n        response.data.data.list.forEach(log => {\n          expect(log.ipAddress).toBe(ipAddress);\n        });\n      }\n    });\n    \n    test('关键字搜索日志', async () => {\n      const keyword = '用户';\n      const response = await global.apiUtils.get(`/operation-logs?search=${keyword}`, adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      response.data.data.list.forEach(log => {\n        const searchText = `${log.description} ${log.module} ${log.operation}`.toLowerCase();\n        expect(searchText).toContain(keyword.toLowerCase());\n      });\n    });\n    \n    test('分页查询操作日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs?page=1&pageSize=5', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response, 5);\n      expect(response.data.data.page).toBe(1);\n      expect(response.data.data.list.length).toBeLessThanOrEqual(5);\n    });\n    \n    test('排序查询操作日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs?sortBy=createdAt&sortOrder=desc&pageSize=10', adminHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      \n      // 验证排序\n      for (let i = 1; i < response.data.data.list.length; i++) {\n        const current = new Date(response.data.data.list[i].createdAt);\n        const previous = new Date(response.data.data.list[i - 1].createdAt);\n        expect(current.getTime()).toBeLessThanOrEqual(previous.getTime());\n      }\n    });\n    \n    test('获取单个操作日志详情', async () => {\n      const response = await global.apiUtils.get(`/operation-logs/${testLogId}`, adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data.id).toBe(testLogId);\n      expect(response.data.data).toHaveProperty('requestData');\n      expect(response.data.data).toHaveProperty('responseData');\n    });\n    \n    test('获取不存在的操作日志应失败', async () => {\n      const response = await global.apiUtils.get('/operation-logs/999999', adminHeaders);\n      \n      global.assertUtils.expectError(response, 404, '未找到');\n    });\n    \n    test('普通用户只能查看自己的操作日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs', userHeaders);\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      \n      // 验证返回的日志都是当前用户的\n      const currentUser = global.testData.user.username;\n      response.data.data.list.forEach(log => {\n        expect(log.username).toBe(currentUser);\n      });\n    });\n  });\n  \n  describe('操作日志统计', () => {\n    test('获取操作日志统计概览', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/overview', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('totalLogs');\n      expect(response.data.data).toHaveProperty('todayLogs');\n      expect(response.data.data).toHaveProperty('successRate');\n      expect(response.data.data).toHaveProperty('failureRate');\n      \n      // 验证数据类型\n      expect(typeof response.data.data.totalLogs).toBe('number');\n      expect(typeof response.data.data.todayLogs).toBe('number');\n      expect(typeof response.data.data.successRate).toBe('number');\n      expect(typeof response.data.data.failureRate).toBe('number');\n    });\n    \n    test('获取操作类型统计', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/operations', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('operation');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('percentage');\n      }\n    });\n    \n    test('获取模块访问统计', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/modules', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('module');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('percentage');\n      }\n    });\n    \n    test('获取用户活跃度统计', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/users', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('username');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('lastActivity');\n      }\n    });\n    \n    test('获取时间趋势统计', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/trend?period=7d', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('date');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('successCount');\n        expect(firstItem).toHaveProperty('failureCount');\n      }\n    });\n    \n    test('获取IP地址统计', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/ips', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const firstItem = response.data.data[0];\n        expect(firstItem).toHaveProperty('ipAddress');\n        expect(firstItem).toHaveProperty('count');\n        expect(firstItem).toHaveProperty('location');\n      }\n    });\n    \n    test('按时间范围获取统计', async () => {\n      const endDate = new Date().toISOString().split('T')[0];\n      const startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n      \n      const response = await global.apiUtils.get(`/operation-logs/statistics/overview?startDate=${startDate}&endDate=${endDate}`, adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('totalLogs');\n    });\n    \n    test('普通用户获取统计应失败', async () => {\n      const response = await global.apiUtils.get('/operation-logs/statistics/overview', userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n  });\n  \n  describe('操作日志导出', () => {\n    test('导出操作日志', async () => {\n      const response = await global.apiUtils.get('/operation-logs/export?format=excel', adminHeaders);\n      \n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('application/vnd.openxmlformats');\n    });\n    \n    test('按条件导出操作日志', async () => {\n      const params = {\n        format: 'excel',\n        operation: 'LOGIN',\n        status: 'SUCCESS',\n        startDate: '2024-01-01',\n        endDate: '2024-12-31'\n      };\n      \n      const queryString = new URLSearchParams(params).toString();\n      const response = await global.apiUtils.get(`/operation-logs/export?${queryString}`, adminHeaders);\n      \n      expect(response.status).toBe(200);\n    });\n    \n    test('导出CSV格式', async () => {\n      const response = await global.apiUtils.get('/operation-logs/export?format=csv', adminHeaders);\n      \n      expect(response.status).toBe(200);\n      expect(response.headers['content-type']).toContain('text/csv');\n    });\n    \n    test('普通用户导出应失败', async () => {\n      const response = await global.apiUtils.get('/operation-logs/export', userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n  });\n  \n  describe('操作日志清理', () => {\n    test('清理过期日志', async () => {\n      const cleanupData = {\n        retentionDays: 30 // 保留30天内的日志\n      };\n      \n      const response = await global.apiUtils.post('/operation-logs/cleanup', cleanupData, adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('deletedCount');\n      expect(typeof response.data.data.deletedCount).toBe('number');\n    });\n    \n    test('按条件清理日志', async () => {\n      const cleanupData = {\n        operation: 'LOGIN',\n        status: 'FAILURE',\n        retentionDays: 7\n      };\n      \n      const response = await global.apiUtils.post('/operation-logs/cleanup', cleanupData, adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('deletedCount');\n    });\n    \n    test('普通用户清理日志应失败', async () => {\n      const cleanupData = {\n        retentionDays: 30\n      };\n      \n      const response = await global.apiUtils.post('/operation-logs/cleanup', cleanupData, userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n    \n    test('无效保留天数应失败', async () => {\n      const cleanupData = {\n        retentionDays: -1 // 无效的保留天数\n      };\n      \n      const response = await global.apiUtils.post('/operation-logs/cleanup', cleanupData, adminHeaders);\n      \n      global.assertUtils.expectError(response, 400, '保留天数');\n    });\n  });\n  \n  describe('安全审计', () => {\n    test('检测异常登录', async () => {\n      const response = await global.apiUtils.get('/operation-logs/security/anomalies?type=login', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n      \n      if (response.data.data.length > 0) {\n        const anomaly = response.data.data[0];\n        expect(anomaly).toHaveProperty('type');\n        expect(anomaly).toHaveProperty('description');\n        expect(anomaly).toHaveProperty('riskLevel');\n        expect(anomaly).toHaveProperty('occurrenceTime');\n      }\n    });\n    \n    test('检测频繁操作', async () => {\n      const response = await global.apiUtils.get('/operation-logs/security/anomalies?type=frequency', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n    });\n    \n    test('检测权限异常', async () => {\n      const response = await global.apiUtils.get('/operation-logs/security/anomalies?type=permission', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toBeInstanceOf(Array);\n    });\n    \n    test('获取安全报告', async () => {\n      const response = await global.apiUtils.get('/operation-logs/security/report', adminHeaders);\n      \n      global.assertUtils.expectSuccess(response);\n      expect(response.data.data).toHaveProperty('summary');\n      expect(response.data.data).toHaveProperty('anomalies');\n      expect(response.data.data).toHaveProperty('recommendations');\n    });\n    \n    test('普通用户访问安全审计应失败', async () => {\n      const response = await global.apiUtils.get('/operation-logs/security/anomalies', userHeaders);\n      \n      global.assertUtils.expectError(response, 403, '权限不足');\n    });\n  });\n  \n  describe('性能测试', () => {\n    test('大数据量日志查询性能', async () => {\n      const startTime = Date.now();\n      \n      const response = await global.apiUtils.get('/operation-logs?pageSize=1000', adminHeaders);\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      global.assertUtils.expectPaginatedResponse(response, 1000);\n      expect(responseTime).toBeLessThan(3000); // 大数据量查询应在3秒内完成\n      \n      console.log(`查询1000条日志耗时：${responseTime}ms`);\n    });\n    \n    test('复杂条件查询性能', async () => {\n      const startTime = Date.now();\n      \n      const params = {\n        operation: 'CREATE',\n        module: 'USER',\n        status: 'SUCCESS',\n        startDate: '2024-01-01',\n        endDate: '2024-12-31',\n        search: '用户',\n        pageSize: 100\n      };\n      \n      const queryString = new URLSearchParams(params).toString();\n      const response = await global.apiUtils.get(`/operation-logs?${queryString}`, adminHeaders);\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      global.assertUtils.expectPaginatedResponse(response);\n      expect(responseTime).toBeLessThan(2000); // 复杂查询应在2秒内完成\n      \n      console.log(`复杂条件查询耗时：${responseTime}ms`);\n    });\n    \n    test('统计查询性能', async () => {\n      const startTime = Date.now();\n      \n      const response = await global.apiUtils.get('/operation-logs/statistics/overview', adminHeaders);\n      \n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n      \n      global.assertUtils.expectSuccess(response);\n      expect(responseTime).toBeLessThan(1000); // 统计查询应在1秒内完成\n      \n      console.log(`统计查询耗时：${responseTime}ms`);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}