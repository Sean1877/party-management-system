{"version":3,"names":["axios","require","fs","path","global","API_BASE_URL","process","env","TEST_TIMEOUT","parseInt","ADMIN_USERNAME","ADMIN_PASSWORD","TEST_USER_USERNAME","TEST_USER_PASSWORD","testResultsDir","join","__dirname","existsSync","mkdirSync","recursive","defaults","baseURL","timeout","headers","common","testData","tokens","users","organizations","activities","fees","authUtils","loginAsAdmin","response","post","username","password","token","data","admin","error","console","message","loginAsUser","user","getAuthHeaders","getAdminAuthHeaders","getUserAuthHeaders","dataUtils","randomString","length","chars","result","i","charAt","Math","floor","random","randomEmail","randomPhone","toString","padStart","generateUserData","id","email","phone","realName","idCard","memberType","joinDate","Date","toISOString","split","generateOrganizationData","name","type","description","establishDate","contactPerson","contactPhone","generateActivityData","startDate","endDate","getTime","title","startTime","endTime","location","maxParticipants","status","generateFeeStandardData","baseAmount","effectiveDate","apiUtils","get","url","put","delete","waitForResponse","expectedStatus","maxAttempts","delay","Promise","resolve","setTimeout","Error","assertUtils","expectStatus","expect","toBe","expectResponseStructure","structure","toMatchObject","expectSuccess","success","expectError","toContain","expectPaginatedResponse","pageSize","toHaveProperty","cleanupUtils","cleanup","log","cleanupUsers","cleanupOrganizations","cleanupActivities","cleanupFees","warn","testUsers","Object","values","testOrgs","org","testActivities","activity","testFees","fee","beforeAll","afterAll","beforeEach","interceptors","request","clear","jest"],"sources":["setup.js"],"sourcesContent":["// API测试全局设置文件\nconst axios = require('axios');\nconst fs = require('fs');\nconst path = require('path');\n\n// 全局配置\nglobal.API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:8080/api';\nglobal.TEST_TIMEOUT = parseInt(process.env.TEST_TIMEOUT) || 30000;\nglobal.ADMIN_USERNAME = process.env.ADMIN_USERNAME || 'admin';\nglobal.ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || 'admin123';\nglobal.TEST_USER_USERNAME = process.env.TEST_USER_USERNAME || 'testuser';\nglobal.TEST_USER_PASSWORD = process.env.TEST_USER_PASSWORD || 'test123';\n\n// 创建测试结果目录\nconst testResultsDir = path.join(__dirname, 'test-results');\nif (!fs.existsSync(testResultsDir)) {\n  fs.mkdirSync(testResultsDir, { recursive: true });\n}\n\n// 全局axios配置\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.defaults.timeout = global.TEST_TIMEOUT;\naxios.defaults.headers.common['Content-Type'] = 'application/json';\n\n// 全局变量存储\nglobal.testData = {\n  tokens: {},\n  users: {},\n  organizations: {},\n  activities: {},\n  fees: {}\n};\n\n// 认证工具函数\nglobal.authUtils = {\n  // 管理员登录\n  async loginAsAdmin() {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        username: global.ADMIN_USERNAME,\n        password: global.ADMIN_PASSWORD\n      });\n      \n      const token = response.data.data.token;\n      global.testData.tokens.admin = token;\n      return token;\n    } catch (error) {\n      console.error('管理员登录失败:', error.message);\n      throw error;\n    }\n  },\n  \n  // 普通用户登录\n  async loginAsUser() {\n    try {\n      const response = await axios.post('/api/auth/login', {\n        username: global.TEST_USER_USERNAME,\n        password: global.TEST_USER_PASSWORD\n      });\n      \n      const token = response.data.data.token;\n      global.testData.tokens.user = token;\n      return token;\n    } catch (error) {\n      console.error('用户登录失败:', error.message);\n      throw error;\n    }\n  },\n  \n  // 获取认证头\n  getAuthHeaders(token) {\n    return {\n      'Authorization': `Bearer ${token}`\n    };\n  },\n  \n  // 获取管理员认证头\n  async getAdminAuthHeaders() {\n    if (!global.testData.tokens.admin) {\n      await this.loginAsAdmin();\n    }\n    return this.getAuthHeaders(global.testData.tokens.admin);\n  },\n  \n  // 获取用户认证头\n  async getUserAuthHeaders() {\n    if (!global.testData.tokens.user) {\n      await this.loginAsUser();\n    }\n    return this.getAuthHeaders(global.testData.tokens.user);\n  }\n};\n\n// 数据工具函数\nglobal.dataUtils = {\n  // 生成随机字符串\n  randomString(length = 8) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  },\n  \n  // 生成随机邮箱\n  randomEmail() {\n    return `test${this.randomString(6)}@example.com`;\n  },\n  \n  // 生成随机手机号\n  randomPhone() {\n    return `138${Math.floor(Math.random() * 100000000).toString().padStart(8, '0')}`;\n  },\n  \n  // 生成测试用户数据\n  generateUserData() {\n    const id = this.randomString(6);\n    return {\n      username: `testuser${id}`,\n      password: 'test123',\n      email: this.randomEmail(),\n      phone: this.randomPhone(),\n      realName: `测试用户${id}`,\n      idCard: `110101199001010${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,\n      memberType: 'regular',\n      joinDate: new Date().toISOString().split('T')[0]\n    };\n  },\n  \n  // 生成测试组织数据\n  generateOrganizationData() {\n    const id = this.randomString(6);\n    return {\n      name: `测试组织${id}`,\n      type: 'branch',\n      description: `这是一个测试组织${id}`,\n      establishDate: new Date().toISOString().split('T')[0],\n      contactPerson: `联系人${id}`,\n      contactPhone: this.randomPhone()\n    };\n  },\n  \n  // 生成测试活动数据\n  generateActivityData() {\n    const id = this.randomString(6);\n    const startDate = new Date();\n    const endDate = new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000);\n    \n    return {\n      title: `测试活动${id}`,\n      description: `这是一个测试活动${id}`,\n      type: 'meeting',\n      startTime: startDate.toISOString(),\n      endTime: endDate.toISOString(),\n      location: `测试地点${id}`,\n      maxParticipants: 50,\n      status: 'upcoming'\n    };\n  },\n  \n  // 生成测试党费标准数据\n  generateFeeStandardData() {\n    const id = this.randomString(6);\n    return {\n      name: `测试党费标准${id}`,\n      memberType: 'regular',\n      baseAmount: Math.floor(Math.random() * 200) + 50,\n      description: `这是一个测试党费标准${id}`,\n      effectiveDate: new Date().toISOString().split('T')[0]\n    };\n  }\n};\n\n// API工具函数\nglobal.apiUtils = {\n  // 发送GET请求\n  async get(url, headers = {}) {\n    try {\n      const response = await axios.get(url, { headers });\n      return response;\n    } catch (error) {\n      return error.response || error;\n    }\n  },\n  \n  // 发送POST请求\n  async post(url, data = {}, headers = {}) {\n    try {\n      const response = await axios.post(url, data, { headers });\n      return response;\n    } catch (error) {\n      return error.response || error;\n    }\n  },\n  \n  // 发送PUT请求\n  async put(url, data = {}, headers = {}) {\n    try {\n      const response = await axios.put(url, data, { headers });\n      return response;\n    } catch (error) {\n      return error.response || error;\n    }\n  },\n  \n  // 发送DELETE请求\n  async delete(url, headers = {}) {\n    try {\n      const response = await axios.delete(url, { headers });\n      return response;\n    } catch (error) {\n      return error.response || error;\n    }\n  },\n  \n  // 等待API响应\n  async waitForResponse(url, expectedStatus = 200, maxAttempts = 10, delay = 1000) {\n    for (let i = 0; i < maxAttempts; i++) {\n      try {\n        const response = await this.get(url);\n        if (response.status === expectedStatus) {\n          return response;\n        }\n      } catch (error) {\n        // 继续尝试\n      }\n      \n      if (i < maxAttempts - 1) {\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw new Error(`API响应超时: ${url}`);\n  }\n};\n\n// 断言工具函数\nglobal.assertUtils = {\n  // 检查响应状态\n  expectStatus(response, expectedStatus) {\n    expect(response.status).toBe(expectedStatus);\n  },\n  \n  // 检查响应数据结构\n  expectResponseStructure(response, structure) {\n    expect(response.data).toMatchObject(structure);\n  },\n  \n  // 检查成功响应\n  expectSuccess(response, data = null) {\n    expect(response.status).toBe(200);\n    expect(response.data.success).toBe(true);\n    if (data) {\n      expect(response.data.data).toMatchObject(data);\n    }\n  },\n  \n  // 检查错误响应\n  expectError(response, expectedStatus, message = null) {\n    expect(response.status).toBe(expectedStatus);\n    expect(response.data.success).toBe(false);\n    if (message) {\n      expect(response.data.message).toContain(message);\n    }\n  },\n  \n  // 检查分页响应\n  expectPaginatedResponse(response, pageSize = null) {\n    this.expectSuccess(response);\n    expect(response.data.data).toHaveProperty('list');\n    expect(response.data.data).toHaveProperty('total');\n    expect(response.data.data).toHaveProperty('page');\n    expect(response.data.data).toHaveProperty('pageSize');\n    \n    if (pageSize) {\n      expect(response.data.data.pageSize).toBe(pageSize);\n    }\n  }\n};\n\n// 清理工具函数\nglobal.cleanupUtils = {\n  // 清理测试数据\n  async cleanup() {\n    console.log('开始清理测试数据...');\n    \n    try {\n      // 清理测试用户\n      await this.cleanupUsers();\n      \n      // 清理测试组织\n      await this.cleanupOrganizations();\n      \n      // 清理测试活动\n      await this.cleanupActivities();\n      \n      // 清理测试党费数据\n      await this.cleanupFees();\n      \n      console.log('测试数据清理完成');\n    } catch (error) {\n      console.warn('清理测试数据失败:', error.message);\n    }\n  },\n  \n  async cleanupUsers() {\n    const headers = await global.authUtils.getAdminAuthHeaders();\n    const testUsers = Object.values(global.testData.users);\n    \n    for (const user of testUsers) {\n      try {\n        await global.apiUtils.delete(`/users/${user.id}`, headers);\n      } catch (error) {\n        console.warn(`删除测试用户失败: ${user.username}`, error.message);\n      }\n    }\n  },\n  \n  async cleanupOrganizations() {\n    const headers = await global.authUtils.getAdminAuthHeaders();\n    const testOrgs = Object.values(global.testData.organizations);\n    \n    for (const org of testOrgs) {\n      try {\n        await global.apiUtils.delete(`/organizations/${org.id}`, headers);\n      } catch (error) {\n        console.warn(`删除测试组织失败: ${org.name}`, error.message);\n      }\n    }\n  },\n  \n  async cleanupActivities() {\n    const headers = await global.authUtils.getAdminAuthHeaders();\n    const testActivities = Object.values(global.testData.activities);\n    \n    for (const activity of testActivities) {\n      try {\n        await global.apiUtils.delete(`/activities/${activity.id}`, headers);\n      } catch (error) {\n        console.warn(`删除测试活动失败: ${activity.title}`, error.message);\n      }\n    }\n  },\n  \n  async cleanupFees() {\n    const headers = await global.authUtils.getAdminAuthHeaders();\n    const testFees = Object.values(global.testData.fees);\n    \n    for (const fee of testFees) {\n      try {\n        await global.apiUtils.delete(`/fees/standards/${fee.id}`, headers);\n      } catch (error) {\n        console.warn(`删除测试党费标准失败: ${fee.name}`, error.message);\n      }\n    }\n  }\n};\n\n// Jest钩子\nbeforeAll(async () => {\n  console.log('开始API测试初始化...');\n  \n  // 等待API服务启动\n  try {\n    await global.apiUtils.waitForResponse('/health', 200, 30, 2000);\n    console.log('API服务已启动');\n  } catch (error) {\n    console.error('API服务启动失败:', error.message);\n    throw error;\n  }\n  \n  // 预先登录获取token\n  try {\n    await global.authUtils.loginAsAdmin();\n    console.log('管理员登录成功');\n  } catch (error) {\n    console.warn('管理员登录失败:', error.message);\n  }\n});\n\nafterAll(async () => {\n  console.log('开始API测试清理...');\n  \n  // 清理测试数据\n  await global.cleanupUtils.cleanup();\n  \n  console.log('API测试清理完成');\n});\n\n// 每个测试前重置axios拦截器\nbeforeEach(() => {\n  // 清除之前的拦截器\n  axios.interceptors.request.clear();\n  axios.interceptors.response.clear();\n});\n\n// 增加Jest超时时间\njest.setTimeout(global.TEST_TIMEOUT);"],"mappings":"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","ignoreList":[]}